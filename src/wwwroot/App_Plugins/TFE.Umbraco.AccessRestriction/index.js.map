{"version":3,"file":"index.js","sources":["../../../../client/src/dashboards/manifest.ts","../../../../client/src/dialogs/modals/manifest.ts","../../../../client/src/context/manifest.ts","../../../../client/src/api/core/ApiError.ts","../../../../client/src/api/core/CancelablePromise.ts","../../../../client/src/api/core/OpenAPI.ts","../../../../client/src/api/core/request.ts","../../../../client/src/api/services/V1Service.ts","../../../../client/src/index.ts","../../../../client/src/repositories/sources/IPAccessRestrictionDataSource.ts","../../../../client/src/repositories/IPAccessRestrictionRepository.ts","../../../../client/src/context/IpAccessRestrictionContext.ts","../../../../client/src/dialogs/modals/IpEntryModalToken.ts","../../../../client/src/dashboards/dashboard.ts","../../../../client/src/dialogs/modals/IpEntryModal.ts"],"sourcesContent":["import type { ManifestDashboard } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nconst dashboards: Array<ManifestDashboard> = [\r\n  {\r\n    type: 'dashboard',\r\n    name: 'Access Restriction',\r\n    alias: 'TFE.Umbraco.AccessRestriction',\r\n    elementName: 'access-restriction',\r\n    js: () => import('@dashboards/dashboard'),\r\n    weight: -10,\r\n    meta: {\r\n      label: 'Access Restriction',\r\n      pathname: 'access-restriction',\r\n    },\r\n    conditions: [\r\n      {\r\n        alias: 'Umb.Condition.SectionAlias',\r\n        match: 'Umb.Section.Content',\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nexport const manifests = [...dashboards];\r\n","import { ManifestModal } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nconst modals: Array<ManifestModal> = [\r\n  {\r\n    type: 'modal',\r\n    alias: 'ip-entry-modal',\r\n    name: 'IP Entry Modal',\r\n    js: () => import('@dialogs/modals/IpEntryModal'),\r\n  },\r\n];\r\n\r\nexport const manifests = [...modals];\r\n","import { ManifestGlobalContext } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nconst contexts: Array<ManifestGlobalContext> = [\r\n  {\r\n    type: 'globalContext',\r\n    alias: 'ip-access-restriction-context',\r\n    name: 'IP Access Restriction Context',\r\n    js: () => import('@context/IpAccessRestrictionContext'),\r\n  },\r\n];\r\n\r\nexport const manifests = [...contexts];\r\n","/* generated using openapi-typescript-codegen -- do not edit */\r\n/* istanbul ignore file */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\nimport type { ApiRequestOptions } from './ApiRequestOptions';\r\nimport type { ApiResult } from './ApiResult';\r\n\r\nexport class ApiError extends Error {\r\n    public readonly url: string;\r\n    public readonly status: number;\r\n    public readonly statusText: string;\r\n    public readonly body: any;\r\n    public readonly request: ApiRequestOptions;\r\n\r\n    constructor(request: ApiRequestOptions, response: ApiResult, message: string) {\r\n        super(message);\r\n\r\n        this.name = 'ApiError';\r\n        this.url = response.url;\r\n        this.status = response.status;\r\n        this.statusText = response.statusText;\r\n        this.body = response.body;\r\n        this.request = request;\r\n    }\r\n}\r\n","/* generated using openapi-typescript-codegen -- do not edit */\r\n/* istanbul ignore file */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\nexport class CancelError extends Error {\r\n\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'CancelError';\r\n    }\r\n\r\n    public get isCancelled(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport interface OnCancel {\r\n    readonly isResolved: boolean;\r\n    readonly isRejected: boolean;\r\n    readonly isCancelled: boolean;\r\n\r\n    (cancelHandler: () => void): void;\r\n}\r\n\r\nexport class CancelablePromise<T> implements Promise<T> {\r\n    #isResolved: boolean;\r\n    #isRejected: boolean;\r\n    #isCancelled: boolean;\r\n    readonly #cancelHandlers: (() => void)[];\r\n    readonly #promise: Promise<T>;\r\n    #resolve?: (value: T | PromiseLike<T>) => void;\r\n    #reject?: (reason?: any) => void;\r\n\r\n    constructor(\r\n        executor: (\r\n            resolve: (value: T | PromiseLike<T>) => void,\r\n            reject: (reason?: any) => void,\r\n            onCancel: OnCancel\r\n        ) => void\r\n    ) {\r\n        this.#isResolved = false;\r\n        this.#isRejected = false;\r\n        this.#isCancelled = false;\r\n        this.#cancelHandlers = [];\r\n        this.#promise = new Promise<T>((resolve, reject) => {\r\n            this.#resolve = resolve;\r\n            this.#reject = reject;\r\n\r\n            const onResolve = (value: T | PromiseLike<T>): void => {\r\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\r\n                    return;\r\n                }\r\n                this.#isResolved = true;\r\n                if (this.#resolve) this.#resolve(value);\r\n            };\r\n\r\n            const onReject = (reason?: any): void => {\r\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\r\n                    return;\r\n                }\r\n                this.#isRejected = true;\r\n                if (this.#reject) this.#reject(reason);\r\n            };\r\n\r\n            const onCancel = (cancelHandler: () => void): void => {\r\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\r\n                    return;\r\n                }\r\n                this.#cancelHandlers.push(cancelHandler);\r\n            };\r\n\r\n            Object.defineProperty(onCancel, 'isResolved', {\r\n                get: (): boolean => this.#isResolved,\r\n            });\r\n\r\n            Object.defineProperty(onCancel, 'isRejected', {\r\n                get: (): boolean => this.#isRejected,\r\n            });\r\n\r\n            Object.defineProperty(onCancel, 'isCancelled', {\r\n                get: (): boolean => this.#isCancelled,\r\n            });\r\n\r\n            return executor(onResolve, onReject, onCancel as OnCancel);\r\n        });\r\n    }\r\n\r\n    get [Symbol.toStringTag]() {\r\n        return \"Cancellable Promise\";\r\n    }\r\n\r\n    public then<TResult1 = T, TResult2 = never>(\r\n        onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\r\n        onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\r\n    ): Promise<TResult1 | TResult2> {\r\n        return this.#promise.then(onFulfilled, onRejected);\r\n    }\r\n\r\n    public catch<TResult = never>(\r\n        onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null\r\n    ): Promise<T | TResult> {\r\n        return this.#promise.catch(onRejected);\r\n    }\r\n\r\n    public finally(onFinally?: (() => void) | null): Promise<T> {\r\n        return this.#promise.finally(onFinally);\r\n    }\r\n\r\n    public cancel(): void {\r\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\r\n            return;\r\n        }\r\n        this.#isCancelled = true;\r\n        if (this.#cancelHandlers.length) {\r\n            try {\r\n                for (const cancelHandler of this.#cancelHandlers) {\r\n                    cancelHandler();\r\n                }\r\n            } catch (error) {\r\n                console.warn('Cancellation threw an error', error);\r\n                return;\r\n            }\r\n        }\r\n        this.#cancelHandlers.length = 0;\r\n        if (this.#reject) this.#reject(new CancelError('Request aborted'));\r\n    }\r\n\r\n    public get isCancelled(): boolean {\r\n        return this.#isCancelled;\r\n    }\r\n}\r\n","/* generated using openapi-typescript-codegen -- do not edit */\r\n/* istanbul ignore file */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\nimport type { ApiRequestOptions } from './ApiRequestOptions';\r\n\r\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\r\ntype Headers = Record<string, string>;\r\n\r\nexport type OpenAPIConfig = {\r\n    BASE: string;\r\n    VERSION: string;\r\n    WITH_CREDENTIALS: boolean;\r\n    CREDENTIALS: 'include' | 'omit' | 'same-origin';\r\n    TOKEN?: string | Resolver<string> | undefined;\r\n    USERNAME?: string | Resolver<string> | undefined;\r\n    PASSWORD?: string | Resolver<string> | undefined;\r\n    HEADERS?: Headers | Resolver<Headers> | undefined;\r\n    ENCODE_PATH?: ((path: string) => string) | undefined;\r\n};\r\n\r\nexport const OpenAPI: OpenAPIConfig = {\r\n    BASE: '',\r\n    VERSION: 'Latest',\r\n    WITH_CREDENTIALS: false,\r\n    CREDENTIALS: 'include',\r\n    TOKEN: undefined,\r\n    USERNAME: undefined,\r\n    PASSWORD: undefined,\r\n    HEADERS: undefined,\r\n    ENCODE_PATH: undefined,\r\n};\r\n","/* generated using openapi-typescript-codegen -- do not edit */\r\n/* istanbul ignore file */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\nimport { ApiError } from './ApiError';\r\nimport type { ApiRequestOptions } from './ApiRequestOptions';\r\nimport type { ApiResult } from './ApiResult';\r\nimport { CancelablePromise } from './CancelablePromise';\r\nimport type { OnCancel } from './CancelablePromise';\r\nimport type { OpenAPIConfig } from './OpenAPI';\r\n\r\nexport const isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {\r\n    return value !== undefined && value !== null;\r\n};\r\n\r\nexport const isString = (value: any): value is string => {\r\n    return typeof value === 'string';\r\n};\r\n\r\nexport const isStringWithValue = (value: any): value is string => {\r\n    return isString(value) && value !== '';\r\n};\r\n\r\nexport const isBlob = (value: any): value is Blob => {\r\n    return (\r\n        typeof value === 'object' &&\r\n        typeof value.type === 'string' &&\r\n        typeof value.stream === 'function' &&\r\n        typeof value.arrayBuffer === 'function' &&\r\n        typeof value.constructor === 'function' &&\r\n        typeof value.constructor.name === 'string' &&\r\n        /^(Blob|File)$/.test(value.constructor.name) &&\r\n        /^(Blob|File)$/.test(value[Symbol.toStringTag])\r\n    );\r\n};\r\n\r\nexport const isFormData = (value: any): value is FormData => {\r\n    return value instanceof FormData;\r\n};\r\n\r\nexport const base64 = (str: string): string => {\r\n    try {\r\n        return btoa(str);\r\n    } catch (err) {\r\n        // @ts-ignore\r\n        return Buffer.from(str).toString('base64');\r\n    }\r\n};\r\n\r\nexport const getQueryString = (params: Record<string, any>): string => {\r\n    const qs: string[] = [];\r\n\r\n    const append = (key: string, value: any) => {\r\n        qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\r\n    };\r\n\r\n    const process = (key: string, value: any) => {\r\n        if (isDefined(value)) {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(v => {\r\n                    process(key, v);\r\n                });\r\n            } else if (typeof value === 'object') {\r\n                Object.entries(value).forEach(([k, v]) => {\r\n                    process(`${key}[${k}]`, v);\r\n                });\r\n            } else {\r\n                append(key, value);\r\n            }\r\n        }\r\n    };\r\n\r\n    Object.entries(params).forEach(([key, value]) => {\r\n        process(key, value);\r\n    });\r\n\r\n    if (qs.length > 0) {\r\n        return `?${qs.join('&')}`;\r\n    }\r\n\r\n    return '';\r\n};\r\n\r\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\r\n    const encoder = config.ENCODE_PATH || encodeURI;\r\n\r\n    const path = options.url\r\n        .replace('{api-version}', config.VERSION)\r\n        .replace(/{(.*?)}/g, (substring: string, group: string) => {\r\n            if (options.path?.hasOwnProperty(group)) {\r\n                return encoder(String(options.path[group]));\r\n            }\r\n            return substring;\r\n        });\r\n\r\n    const url = `${config.BASE}${path}`;\r\n    if (options.query) {\r\n        return `${url}${getQueryString(options.query)}`;\r\n    }\r\n    return url;\r\n};\r\n\r\nexport const getFormData = (options: ApiRequestOptions): FormData | undefined => {\r\n    if (options.formData) {\r\n        const formData = new FormData();\r\n\r\n        const process = (key: string, value: any) => {\r\n            if (isString(value) || isBlob(value)) {\r\n                formData.append(key, value);\r\n            } else {\r\n                formData.append(key, JSON.stringify(value));\r\n            }\r\n        };\r\n\r\n        Object.entries(options.formData)\r\n            .filter(([_, value]) => isDefined(value))\r\n            .forEach(([key, value]) => {\r\n                if (Array.isArray(value)) {\r\n                    value.forEach(v => process(key, v));\r\n                } else {\r\n                    process(key, value);\r\n                }\r\n            });\r\n\r\n        return formData;\r\n    }\r\n    return undefined;\r\n};\r\n\r\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\r\n\r\nexport const resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {\r\n    if (typeof resolver === 'function') {\r\n        return (resolver as Resolver<T>)(options);\r\n    }\r\n    return resolver;\r\n};\r\n\r\nexport const getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions): Promise<Headers> => {\r\n    const [token, username, password, additionalHeaders] = await Promise.all([\r\n        resolve(options, config.TOKEN),\r\n        resolve(options, config.USERNAME),\r\n        resolve(options, config.PASSWORD),\r\n        resolve(options, config.HEADERS),\r\n    ]);\r\n\r\n    const headers = Object.entries({\r\n        Accept: 'application/json',\r\n        ...additionalHeaders,\r\n        ...options.headers,\r\n    })\r\n        .filter(([_, value]) => isDefined(value))\r\n        .reduce((headers, [key, value]) => ({\r\n            ...headers,\r\n            [key]: String(value),\r\n        }), {} as Record<string, string>);\r\n\r\n    if (isStringWithValue(token)) {\r\n        headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n\r\n    if (isStringWithValue(username) && isStringWithValue(password)) {\r\n        const credentials = base64(`${username}:${password}`);\r\n        headers['Authorization'] = `Basic ${credentials}`;\r\n    }\r\n\r\n    if (options.body !== undefined) {\r\n        if (options.mediaType) {\r\n            headers['Content-Type'] = options.mediaType;\r\n        } else if (isBlob(options.body)) {\r\n            headers['Content-Type'] = options.body.type || 'application/octet-stream';\r\n        } else if (isString(options.body)) {\r\n            headers['Content-Type'] = 'text/plain';\r\n        } else if (!isFormData(options.body)) {\r\n            headers['Content-Type'] = 'application/json';\r\n        }\r\n    }\r\n\r\n    return new Headers(headers);\r\n};\r\n\r\nexport const getRequestBody = (options: ApiRequestOptions): any => {\r\n    if (options.body !== undefined) {\r\n        if (options.mediaType?.includes('/json')) {\r\n            return JSON.stringify(options.body)\r\n        } else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\r\n            return options.body;\r\n        } else {\r\n            return JSON.stringify(options.body);\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\n\r\nexport const sendRequest = async (\r\n    config: OpenAPIConfig,\r\n    options: ApiRequestOptions,\r\n    url: string,\r\n    body: any,\r\n    formData: FormData | undefined,\r\n    headers: Headers,\r\n    onCancel: OnCancel\r\n): Promise<Response> => {\r\n    const controller = new AbortController();\r\n\r\n    const request: RequestInit = {\r\n        headers,\r\n        body: body ?? formData,\r\n        method: options.method,\r\n        signal: controller.signal,\r\n    };\r\n\r\n    if (config.WITH_CREDENTIALS) {\r\n        request.credentials = config.CREDENTIALS;\r\n    }\r\n\r\n    onCancel(() => controller.abort());\r\n\r\n    return await fetch(url, request);\r\n};\r\n\r\nexport const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {\r\n    if (responseHeader) {\r\n        const content = response.headers.get(responseHeader);\r\n        if (isString(content)) {\r\n            return content;\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\n\r\nexport const getResponseBody = async (response: Response): Promise<any> => {\r\n    if (response.status !== 204) {\r\n        try {\r\n            const contentType = response.headers.get('Content-Type');\r\n            if (contentType) {\r\n                const jsonTypes = ['application/json', 'application/problem+json']\r\n                const isJSON = jsonTypes.some(type => contentType.toLowerCase().startsWith(type));\r\n                if (isJSON) {\r\n                    return await response.json();\r\n                } else {\r\n                    return await response.text();\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\n\r\nexport const catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\r\n    const errors: Record<number, string> = {\r\n        400: 'Bad Request',\r\n        401: 'Unauthorized',\r\n        403: 'Forbidden',\r\n        404: 'Not Found',\r\n        500: 'Internal Server Error',\r\n        502: 'Bad Gateway',\r\n        503: 'Service Unavailable',\r\n        ...options.errors,\r\n    }\r\n\r\n    const error = errors[result.status];\r\n    if (error) {\r\n        throw new ApiError(options, result, error);\r\n    }\r\n\r\n    if (!result.ok) {\r\n        const errorStatus = result.status ?? 'unknown';\r\n        const errorStatusText = result.statusText ?? 'unknown';\r\n        const errorBody = (() => {\r\n            try {\r\n                return JSON.stringify(result.body, null, 2);\r\n            } catch (e) {\r\n                return undefined;\r\n            }\r\n        })();\r\n\r\n        throw new ApiError(options, result,\r\n            `Generic Error: status: ${errorStatus}; status text: ${errorStatusText}; body: ${errorBody}`\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * Request method\r\n * @param config The OpenAPI configuration object\r\n * @param options The request options from the service\r\n * @returns CancelablePromise<T>\r\n * @throws ApiError\r\n */\r\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {\r\n    return new CancelablePromise(async (resolve, reject, onCancel) => {\r\n        try {\r\n            const url = getUrl(config, options);\r\n            const formData = getFormData(options);\r\n            const body = getRequestBody(options);\r\n            const headers = await getHeaders(config, options);\r\n\r\n            if (!onCancel.isCancelled) {\r\n                const response = await sendRequest(config, options, url, body, formData, headers, onCancel);\r\n                const responseBody = await getResponseBody(response);\r\n                const responseHeader = getResponseHeader(response, options.responseHeader);\r\n\r\n                const result: ApiResult = {\r\n                    url,\r\n                    ok: response.ok,\r\n                    status: response.status,\r\n                    statusText: response.statusText,\r\n                    body: responseHeader ?? responseBody,\r\n                };\r\n\r\n                catchErrorCodes(options, result);\r\n\r\n                resolve(result.body);\r\n            }\r\n        } catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n};\r\n","/* generated using openapi-typescript-codegen -- do not edit */\r\n/* istanbul ignore file */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\nimport type { IPAccessEntry } from '../models/IPAccessEntry';\r\nimport type { CancelablePromise } from '../core/CancelablePromise';\r\nimport { OpenAPI } from '../core/OpenAPI';\r\nimport { request as __request } from '../core/request';\r\nexport class V1Service {\r\n  /**\r\n   * @returns string OK\r\n   * @throws ApiError\r\n   */\r\n  public static getUmbracoApiV1IpAccessRestrictionApiCheckIpWhitelistFile(): CancelablePromise<string> {\r\n    return __request(OpenAPI, {\r\n      method: 'GET',\r\n      url: '/umbraco/api/v1/IPAccessRestrictionApi/CheckIpWhitelistFile',\r\n      errors: {\r\n        404: `Not Found`,\r\n      },\r\n    });\r\n  }\r\n  /**\r\n   * @param id\r\n   * @returns void\r\n   * @throws ApiError\r\n   */\r\n  public static deleteUmbracoApiV1IpAccessRestrictionApiDelete(id: string): CancelablePromise<void> {\r\n    return __request(OpenAPI, {\r\n      method: 'DELETE',\r\n      url: '/umbraco/api/v1/IPAccessRestrictionApi/Delete/{id}',\r\n      path: {\r\n        id: id,\r\n      },\r\n      errors: {\r\n        404: `Not Found`,\r\n      },\r\n    });\r\n  }\r\n  /**\r\n   * @returns any OK\r\n   * @throws ApiError\r\n   */\r\n  public static getUmbracoApiV1IpAccessRestrictionApiGetAll(): CancelablePromise<Array<IPAccessEntry>> {\r\n    return __request(OpenAPI, {\r\n      method: 'GET',\r\n      url: '/umbraco/api/v1/IPAccessRestrictionApi/GetAll',\r\n    });\r\n  }\r\n  /**\r\n   * @returns string OK\r\n   * @throws ApiError\r\n   */\r\n  public static getUmbracoApiV1IpAccessRestrictionApiGetAllIpAddresses(): CancelablePromise<Array<string>> {\r\n    return __request(OpenAPI, {\r\n      method: 'GET',\r\n      url: '/umbraco/api/v1/IPAccessRestrictionApi/GetAllIpAddresses',\r\n    });\r\n  }\r\n  /**\r\n   * @param id\r\n   * @returns any OK\r\n   * @throws ApiError\r\n   */\r\n  public static getUmbracoApiV1IpAccessRestrictionApiGetbyId(id: string): CancelablePromise<IPAccessEntry> {\r\n    return __request(OpenAPI, {\r\n      method: 'GET',\r\n      url: '/umbraco/api/v1/IPAccessRestrictionApi/GetbyId/{id}',\r\n      path: {\r\n        id: id,\r\n      },\r\n      errors: {\r\n        404: `Not Found`,\r\n      },\r\n    });\r\n  }\r\n  /**\r\n   * @returns string OK\r\n   * @throws ApiError\r\n   */\r\n  public static getUmbracoApiV1IpAccessRestrictionApiGetClientIp(): CancelablePromise<string> {\r\n    return __request(OpenAPI, {\r\n      method: 'GET',\r\n      url: '/umbraco/api/v1/IPAccessRestrictionApi/GetClientIP',\r\n    });\r\n  }\r\n  /**\r\n   * @returns string OK\r\n   * @throws ApiError\r\n   */\r\n  public static getUmbracoApiV1IpAccessRestrictionApiGetHeaderInfo(): CancelablePromise<string> {\r\n    return __request(OpenAPI, {\r\n      method: 'GET',\r\n      url: '/umbraco/api/v1/IPAccessRestrictionApi/GetHeaderInfo',\r\n      errors: {\r\n        404: `Not Found`,\r\n      },\r\n    });\r\n  }\r\n  /**\r\n   * @param requestBody\r\n   * @returns any Created\r\n   * @throws ApiError\r\n   */\r\n  public static postUmbracoApiV1IpAccessRestrictionApiSave(\r\n    requestBody?: IPAccessEntry,\r\n  ): CancelablePromise<IPAccessEntry> {\r\n    return __request(OpenAPI, {\r\n      method: 'POST',\r\n      url: '/umbraco/api/v1/IPAccessRestrictionApi/Save',\r\n      body: requestBody,\r\n      mediaType: 'application/json',\r\n      errors: {\r\n        400: `Bad Request`,\r\n      },\r\n    });\r\n  }\r\n  /**\r\n   * @returns string OK\r\n   * @throws ApiError\r\n   */\r\n  public static getUmbracoApiV1IpAccessRestrictionApiGetInstallationInfo(): CancelablePromise<string> {\r\n    return __request(OpenAPI, {\r\n      method: 'GET',\r\n      url: '/umbraco/api/v1/IPAccessRestrictionApi/GetInstallationInfo',\r\n      errors: {\r\n        404: `Not Found`,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { UmbEntryPointOnInit } from '@umbraco-cms/backoffice/extension-api';\r\n\r\n// load up the manifests here.\r\nimport { manifests as dashboardManifests } from '@dashboards/manifest.ts';\r\nimport { manifests as modalManifests } from '@dialogs/modals/manifest.ts';\r\nimport { manifests as contextManifests } from '@context/manifest.ts';\r\n\r\nimport { UMB_AUTH_CONTEXT } from '@umbraco-cms/backoffice/auth';\r\nimport { OpenAPI } from '@api/index.ts';\r\n\r\nexport const onInit: UmbEntryPointOnInit = (_host, extensionRegistry) => {\r\n  // register them here.\r\n  extensionRegistry.registerMany([...dashboardManifests, ...modalManifests, ...contextManifests]);\r\n\r\n  _host.consumeContext(UMB_AUTH_CONTEXT, (_auth) => {\r\n    const umbOpenApi = _auth.getOpenApiConfiguration();\r\n    OpenAPI.BASE = umbOpenApi.base;\r\n    OpenAPI.TOKEN = umbOpenApi.token;\r\n    OpenAPI.WITH_CREDENTIALS = umbOpenApi.withCredentials;\r\n    OpenAPI.CREDENTIALS = umbOpenApi.credentials;\r\n  });\r\n};\r\n","import { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbDataSourceResponse } from '@umbraco-cms/backoffice/repository';\r\nimport { tryExecuteAndNotify } from '@umbraco-cms/backoffice/resources';\r\nimport { IPAccessEntry, V1Service } from '@api/index.ts';\r\nimport { IIPAccessRestrictionDataSource } from '@repositories/sources/IIPAccessRestrictionDataSource';\r\n\r\nexport class IPAccessRestrictionDataSource implements IIPAccessRestrictionDataSource {\r\n  #host: UmbControllerHost;\r\n\r\n  constructor(host: UmbControllerHost) {\r\n    this.#host = host;\r\n  }\r\n\r\n  async checkIpWhitelistFile(): Promise<UmbDataSourceResponse<string>> {\r\n    return await tryExecuteAndNotify(this.#host, V1Service.getUmbracoApiV1IpAccessRestrictionApiCheckIpWhitelistFile());\r\n  }\r\n\r\n  async delete(id: string): Promise<UmbDataSourceResponse<boolean>> {\r\n    const deleteOperation = V1Service.deleteUmbracoApiV1IpAccessRestrictionApiDelete(id)\r\n      .then(() => true)\r\n      .catch(() => false);\r\n    return await tryExecuteAndNotify(this.#host, deleteOperation);\r\n  }\r\n\r\n  async getAll(): Promise<UmbDataSourceResponse<Array<IPAccessEntry>>> {\r\n    return await tryExecuteAndNotify(this.#host, V1Service.getUmbracoApiV1IpAccessRestrictionApiGetAll());\r\n  }\r\n\r\n  async getAllIpAddresses(): Promise<UmbDataSourceResponse<Array<string>>> {\r\n    return await tryExecuteAndNotify(this.#host, V1Service.getUmbracoApiV1IpAccessRestrictionApiGetAllIpAddresses());\r\n  }\r\n\r\n  async getbyId(id: string): Promise<UmbDataSourceResponse<IPAccessEntry>> {\r\n    return await tryExecuteAndNotify(this.#host, V1Service.getUmbracoApiV1IpAccessRestrictionApiGetbyId(id));\r\n  }\r\n\r\n  async getClientIp(): Promise<UmbDataSourceResponse<string>> {\r\n    return await tryExecuteAndNotify(this.#host, V1Service.getUmbracoApiV1IpAccessRestrictionApiGetClientIp());\r\n  }\r\n\r\n  async getHeaderInfo(): Promise<UmbDataSourceResponse<string>> {\r\n    return await tryExecuteAndNotify(this.#host, V1Service.getUmbracoApiV1IpAccessRestrictionApiGetHeaderInfo());\r\n  }\r\n\r\n  async saveIpAccessEntry(requestBody?: IPAccessEntry): Promise<UmbDataSourceResponse<IPAccessEntry>> {\r\n    console.log('DataSource: Saving IP Access Entry:', requestBody);\r\n    return await tryExecuteAndNotify(this.#host, V1Service.postUmbracoApiV1IpAccessRestrictionApiSave(requestBody));\r\n  }\r\n\r\n  async GetInstallationInfo(): Promise<UmbDataSourceResponse<string>> {\r\n    return await tryExecuteAndNotify(this.#host, V1Service.getUmbracoApiV1IpAccessRestrictionApiGetInstallationInfo());\r\n  }\r\n}\r\n","import { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { IPAccessRestrictionDataSource } from '@repositories/sources/IPAccessRestrictionDataSource.ts';\r\nimport { IPAccessEntry } from '@api/index.ts';\r\n\r\nexport class IPAccessRestrictionRepository extends UmbControllerBase {\r\n  #dataSource: IPAccessRestrictionDataSource;\r\n\r\n  constructor(host: UmbControllerHost) {\r\n    super(host);\r\n    this.#dataSource = new IPAccessRestrictionDataSource(this);\r\n  }\r\n\r\n  async checkIpWhitelistFile() {\r\n    return this.#dataSource.checkIpWhitelistFile();\r\n  }\r\n\r\n  async deleteIpAccessEntry(id: string) {\r\n    return this.#dataSource.delete(id);\r\n  }\r\n\r\n  async getAllIpAccessEntries() {\r\n    return this.#dataSource.getAll();\r\n  }\r\n\r\n  async getAllIpAddresses() {\r\n    return this.#dataSource.getAllIpAddresses();\r\n  }\r\n\r\n  async getIpAccessEntryById(id: string) {\r\n    return this.#dataSource.getbyId(id);\r\n  }\r\n\r\n  async getClientIp() {\r\n    return this.#dataSource.getClientIp();\r\n  }\r\n\r\n  async getHeaderInfo() {\r\n    return this.#dataSource.getHeaderInfo();\r\n  }\r\n\r\n  async saveIpAccessEntry(requestBody?: IPAccessEntry) {\r\n    return this.#dataSource.saveIpAccessEntry(requestBody);\r\n  }\r\n\r\n  async GetInstallationInfo() {\r\n    return this.#dataSource.GetInstallationInfo();\r\n  }\r\n}\r\n","import { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\nimport { IPAccessRestrictionRepository } from '@repositories/IPAccessRestrictionRepository';\r\nimport { IPAccessEntry } from '@api/models/IPAccessEntry';\r\n\r\nimport { UmbStringState, UmbArrayState, UmbBooleanState } from '@umbraco-cms/backoffice/observable-api';\r\n\r\nexport class IPAccessRestrictionContext extends UmbControllerBase {\r\n  repository: IPAccessRestrictionRepository;\r\n\r\n  #checkIpWhitelistFile = new UmbStringState('');\r\n  public readonly ipWhitelisteTextFileInUse = this.#checkIpWhitelistFile.asObservable();\r\n\r\n  #ipEntries = new UmbArrayState(<Array<IPAccessEntry>>[], (x) => x.id);\r\n  public readonly ipEntries = this.#ipEntries.asObservable();\r\n\r\n  #ips = new UmbArrayState(<Array<string>>[], (x) => x);\r\n  public readonly ips = this.#ips.asObservable();\r\n\r\n  #clientIp = new UmbStringState('');\r\n  public readonly clientIp = this.#clientIp.asObservable();\r\n\r\n  #headerInfo = new UmbStringState('');\r\n  public readonly headerInfo = this.#headerInfo.asObservable();\r\n\r\n  #isIpInList = new UmbBooleanState(false);\r\n  public readonly isIpInList = this.#isIpInList.asObservable();\r\n\r\n  #installationInfo = new UmbStringState('');\r\n  public readonly installationInfo = this.#installationInfo.asObservable();\r\n\r\n  constructor(host: UmbControllerHost) {\r\n    super(host);\r\n\r\n    this.provideContext(IP_ACCESS_RESTRICTION_CONTEXT_TOKEN, this);\r\n    this.repository = new IPAccessRestrictionRepository(this);\r\n    this.checkIpInList();\r\n  }\r\n\r\n  _handleResultError(result: any) {\r\n    if (result.error) {\r\n      throw new Error(result.error.message);\r\n    }\r\n    if (result.data === undefined) {\r\n      throw new Error('Received undefined data');\r\n    }\r\n    return result.data;\r\n  }\r\n\r\n  async checkIpInList(): Promise<void> {\r\n    await this.getAllIpAddresses();\r\n    await this.getClientIp();\r\n\r\n    let ips = this.#ips.getValue();\r\n    let clientIp = this.#clientIp.getValue();\r\n\r\n    if (ips && clientIp) {\r\n      this.#isIpInList.setValue(ips.includes(clientIp));\r\n    } else {\r\n      console.error('Your IP address is not on the list');\r\n      this.#isIpInList.setValue(false);\r\n    }\r\n  }\r\n\r\n  async checkIpWhitelistFile() {\r\n    try {\r\n      const result = await this.repository.checkIpWhitelistFile();\r\n      const data = this._handleResultError(result);\r\n\r\n      this.#checkIpWhitelistFile?.setValue(data);\r\n    } catch (error) {\r\n      console.error('Error in checkIpWhitelistFile:', error);\r\n    }\r\n  }\r\n\r\n  async deleteIpAccessEntry(id: string) {\r\n    try {\r\n      const result = await this.repository.deleteIpAccessEntry(id);\r\n      this._handleResultError(result);\r\n\r\n      await this.getAllIpAccessEntries();\r\n      await this.checkIpInList();\r\n    } catch (error) {\r\n      console.error('Error in deleteIpAccessEntry:', error);\r\n    }\r\n  }\r\n\r\n  async getAllIpAccessEntries() {\r\n    try {\r\n      const result = await this.repository.getAllIpAccessEntries();\r\n      const data = this._handleResultError(result);\r\n\r\n      this.#ipEntries.setValue(data);\r\n    } catch (error) {\r\n      console.error('Error in getAllIpAccessEntries:', error);\r\n    }\r\n  }\r\n\r\n  async getAllIpAddresses() {\r\n    try {\r\n      const result = await this.repository.getAllIpAddresses();\r\n      const data = this._handleResultError(result);\r\n\r\n      this.#ips.setValue(data);\r\n    } catch (error) {\r\n      console.error('Error in getAllIpAddresses:', error);\r\n    }\r\n  }\r\n\r\n  async getIpAccessEntryById(id: string): Promise<IPAccessEntry | undefined> {\r\n    try {\r\n      const result = await this.repository.getIpAccessEntryById(id);\r\n\r\n      return this._handleResultError(result);\r\n    } catch (error) {\r\n      console.error('Error in getIpAccessEntryById', error);\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  async getClientIp() {\r\n    try {\r\n      const result = await this.repository.getClientIp();\r\n      const data = this._handleResultError(result);\r\n\r\n      this.#clientIp.setValue(data);\r\n    } catch (error) {\r\n      console.error('Error in getClientIp', error);\r\n    }\r\n  }\r\n\r\n  async getHeaderInfo() {\r\n    try {\r\n      const result = await this.repository.getHeaderInfo();\r\n      const data = this._handleResultError(result);\r\n\r\n      this.#headerInfo.setValue(data);\r\n    } catch (error) {\r\n      console.error('Error in getHeaderInfo:', error);\r\n    }\r\n  }\r\n\r\n  async saveIpAccessEntry(entry: IPAccessEntry): Promise<void> {\r\n    try {\r\n      const result = await this.repository.saveIpAccessEntry(entry);\r\n      this._handleResultError(result);\r\n\r\n      await this.getAllIpAccessEntries();\r\n      await this.checkIpInList();\r\n    } catch (error) {\r\n      console.error('Error in saveIpAccessEntry:', error);\r\n      console.error('Entry:', entry);\r\n    }\r\n  }\r\n\r\n  async getInstallationInfo() {\r\n    try {\r\n      const result = await this.repository.GetInstallationInfo();\r\n      const data = this._handleResultError(result);\r\n\r\n      this.#installationInfo.setValue(data);\r\n    } catch (error) {\r\n      console.error('Error in getInstallationInfo:', error);\r\n    }\r\n  }\r\n}\r\n\r\nexport default IPAccessRestrictionContext;\r\n\r\nexport const IP_ACCESS_RESTRICTION_CONTEXT_TOKEN = new UmbContextToken<IPAccessRestrictionContext>(\r\n  IPAccessRestrictionContext.name,\r\n);\r\n","import { UmbModalToken } from '@umbraco-cms/backoffice/modal';\r\nimport { IPAccessEntry } from '@models/IPAccessEntry';\r\n\r\nexport interface IpEntryModalData {\r\n  ipEntry?: IPAccessEntry;\r\n}\r\n\r\nexport interface IpEntryModalValue {\r\n  ipEntry: IPAccessEntry;\r\n}\r\n\r\nexport const IP_ENTRY_MODAL_TOKEN = new UmbModalToken<IpEntryModalData, IpEntryModalValue>('ip-entry-modal', {\r\n  modal: {\r\n    type: 'sidebar',\r\n    size: 'small',\r\n  },\r\n});\r\n","import { LitElement, css, html, customElement, property, unsafeHTML } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbElementMixin } from '@umbraco-cms/backoffice/element-api';\r\nimport { IP_ACCESS_RESTRICTION_CONTEXT_TOKEN, IPAccessRestrictionContext } from '@context/IpAccessRestrictionContext';\r\nimport { IP_ENTRY_MODAL_TOKEN } from '@dialogs/modals/IpEntryModalToken.ts';\r\nimport { UMB_MODAL_MANAGER_CONTEXT } from '@umbraco-cms/backoffice/modal';\r\nimport IpEntry, { IPAccessEntry } from '@models/IPAccessEntry.ts';\r\n\r\n@customElement('dashboard-element')\r\nexport class DashboardElement extends UmbElementMixin(LitElement) {\r\n  modalManagerContext?: typeof UMB_MODAL_MANAGER_CONTEXT.TYPE;\r\n  context?: IPAccessRestrictionContext;\r\n\r\n  @property({ type: String }) ipWhitelisteTextFileInUse?: string;\r\n  @property({ type: Array }) ipEntries?: IpEntry[];\r\n  @property({ type: Array }) ips?: string[];\r\n  @property({ type: String }) clientIP?: string;\r\n  @property({ type: String }) customHeaderInfo?: string;\r\n  @property({ type: Boolean }) isIpInList = false;\r\n  @property({ type: String }) installationInfo?: string;\r\n\r\n  constructor() {\r\n    super();\r\n    this.consumeContext(IP_ACCESS_RESTRICTION_CONTEXT_TOKEN, (_instance) => {\r\n      this.context = _instance;\r\n\r\n      this.observe(_instance.ipWhitelisteTextFileInUse, (_ipWhitelisteTextFileInUse) => {\r\n        this.ipWhitelisteTextFileInUse = _ipWhitelisteTextFileInUse;\r\n      });\r\n\r\n      this.observe(_instance.ipEntries, (_ipEntries) => {\r\n        this.ipEntries = _ipEntries;\r\n      });\r\n\r\n      this.observe(_instance.ips, (_ips) => {\r\n        this.ips = _ips;\r\n      });\r\n\r\n      this.observe(_instance.clientIp, (_clientIp) => {\r\n        this.clientIP = _clientIp;\r\n      });\r\n\r\n      this.observe(_instance.headerInfo, (_headerInfo) => {\r\n        this.customHeaderInfo = _headerInfo;\r\n      });\r\n\r\n      this.observe(_instance.isIpInList, (_isIpInList) => {\r\n        console.log('Observed isIpInList:', _isIpInList);\r\n        this.isIpInList = _isIpInList;\r\n      });\r\n\r\n      this.observe(_instance.installationInfo, (_installationInfo) => {\r\n        this.installationInfo = _installationInfo;\r\n      });\r\n    });\r\n\r\n    this.consumeContext(UMB_MODAL_MANAGER_CONTEXT, (instance) => {\r\n      this.modalManagerContext = instance;\r\n    });\r\n  }\r\n\r\n  connectedCallback(): void {\r\n    super.connectedCallback();\r\n\r\n    if (this.context != null) {\r\n      this.context.checkIpWhitelistFile();\r\n      this.context.getAllIpAccessEntries();\r\n      this.context.getHeaderInfo();\r\n      this.context.checkIpInList();\r\n      this.context.getInstallationInfo();\r\n    }\r\n  }\r\n\r\n  private _formatDate(dateString?: string): string {\r\n    if (!dateString) {\r\n      return 'N/A';\r\n    }\r\n    const options: Intl.DateTimeFormatOptions = {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n    };\r\n    return new Date(dateString).toLocaleDateString('en-US', options);\r\n  }\r\n\r\n  _openModal(ipEntry?: IpEntry) {\r\n    this.modalManagerContext?.open(this, IP_ENTRY_MODAL_TOKEN, {\r\n      data: {\r\n        ipEntry,\r\n      },\r\n    });\r\n  }\r\n\r\n  async _handleEditClick(ipEntry: IPAccessEntry) {\r\n    if (ipEntry.id) {\r\n      const ipDetails = await this.context?.getIpAccessEntryById(ipEntry.id);\r\n      this._openModal(ipDetails);\r\n    } else {\r\n      console.error('@handleEditClick IP Address is undefined or null');\r\n    }\r\n  }\r\n\r\n  async _handleDeleteClick(ipEntry: IPAccessEntry) {\r\n    if (ipEntry.id) {\r\n      await this.context!.deleteIpAccessEntry(ipEntry.id);\r\n    } else {\r\n      console.error('IP entry ID is undefined or null');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n      <div class=\"container\">\r\n        <div id=\"top-bar\">\r\n          <uui-button label=\"Add new IP address\" look=\"primary\" @click=\"${this._openModal}\"\r\n            >+ Add new IP address</uui-button\r\n          >\r\n\r\n          <div id=\"installation-alert\" ?hidden=\"${!this.installationInfo}\">\r\n            <uui-icon name=\"alert\" style=\"color: orange; margin-bottom: 4px;\"></uui-icon>\r\n            <span>${unsafeHTML(this.installationInfo)}</span>\r\n          </div>\r\n\r\n          <div id=\"header-alert\" ?hidden=\"${!this.customHeaderInfo}\">\r\n            <uui-icon name=\"alert\" style=\"color: orange; margin-bottom: 4px;\"></uui-icon>\r\n            <span>${this.customHeaderInfo}</span>\r\n          </div>\r\n\r\n          <div id=\"file-alert\" ?hidden=\"${!this.ipWhitelisteTextFileInUse}\">\r\n            <uui-icon name=\"alert\" style=\"color: orange; margin-bottom: 4px;\"></uui-icon>\r\n            <span>${this.ipWhitelisteTextFileInUse}</span>\r\n          </div>\r\n\r\n          <div id=\"ip-alert\" ?hidden=\"${this.isIpInList}\">\r\n            <uui-icon name=\"alert\" style=\"color: orange; margin-bottom: 10px;\"></uui-icon>\r\n            <span>Your IP address is not on the list</span>\r\n            <uui-button\r\n              label=\"Add current IP address\"\r\n              look=\"primary\"\r\n              @click=\"${() =>\r\n                this._openModal({\r\n                  id: '',\r\n                  ip: this.clientIP,\r\n                  description: '',\r\n                })}\"\r\n              >+ Add</uui-button\r\n            >\r\n          </div>\r\n        </div>\r\n        <h3>Whitelisted IP Addresses</h3>\r\n        <uui-table aria-label=\"IP Address Table\">\r\n          <uui-table-column style=\"width: 20%;\"></uui-table-column>\r\n          <uui-table-column style=\"width: 20%;\"></uui-table-column>\r\n          <uui-table-column style=\"width: 20%;\"></uui-table-column>\r\n          <uui-table-column style=\"width: 20%;\"></uui-table-column>\r\n          <uui-table-column style=\"width: 20%;\"></uui-table-column>\r\n\r\n          <uui-table-head>\r\n            <uui-table-head-cell>IP</uui-table-head-cell>\r\n            <uui-table-head-cell>Description</uui-table-head-cell>\r\n            <uui-table-head-cell>Modified</uui-table-head-cell>\r\n            <uui-table-head-cell>Modified By</uui-table-head-cell>\r\n            <uui-table-head-cell>Actions</uui-table-head-cell>\r\n          </uui-table-head>\r\n\r\n          ${this.ipEntries?.map(\r\n            (ipEntry) => html`\r\n              <uui-table-row>\r\n                <uui-table-cell>${ipEntry.ip}</uui-table-cell>\r\n                <uui-table-cell>${ipEntry.description}</uui-table-cell>\r\n                <uui-table-cell>${this._formatDate(ipEntry.modified!)}</uui-table-cell>\r\n                <uui-table-cell>${ipEntry.modifiedBy}</uui-table-cell>\r\n                <uui-table-cell>\r\n                  <uui-button\r\n                    label=\"Edit button\"\r\n                    look=\"primary\"\r\n                    color=\"default\"\r\n                    @click=\"${() => this._handleEditClick(ipEntry)}\"\r\n                    >Edit</uui-button\r\n                  >\r\n                  <uui-button\r\n                    label=\"Delete button\"\r\n                    look=\"primary\"\r\n                    color=\"danger\"\r\n                    @click=\"${() => this._handleDeleteClick(ipEntry)}\"\r\n                    >Delete</uui-button\r\n                  >\r\n                </uui-table-cell>\r\n              </uui-table-row>\r\n            `,\r\n          )}\r\n        </uui-table>\r\n      </div>\r\n    `;\r\n  }\r\n  public static readonly styles = css`\r\n    .container {\r\n      padding: 30px;\r\n    }\r\n    #top-bar {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n    }\r\n  `;\r\n}\r\n\r\nexport default DashboardElement;\r\n\r\ndeclare global {\r\n  interface HTMLElementsTagNameMap {\r\n    'access-restriction': DashboardElement;\r\n  }\r\n}\r\n","import { UmbElementMixin } from '@umbraco-cms/backoffice/element-api';\r\nimport { UmbModalExtensionElement } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { css, customElement, html, LitElement, property, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { IpEntryModalData, IpEntryModalValue } from '@dialogs/modals/IpEntryModalToken';\r\nimport { IP_ACCESS_RESTRICTION_CONTEXT_TOKEN, IPAccessRestrictionContext } from '@context/IpAccessRestrictionContext';\r\nimport { UmbModalContext } from '@umbraco-cms/backoffice/modal';\r\nimport { IPAccessEntry } from '@models/IPAccessEntry';\r\nimport { firstValueFrom, of } from '@umbraco-cms/backoffice/external/rxjs';\r\n\r\ninterface Errors {\r\n  ip?: string;\r\n  description?: string;\r\n  duplicateIp?: string;\r\n}\r\n\r\n@customElement('ip-access-restriction-modal')\r\nexport default class IpEntryModal\r\n  extends UmbElementMixin(LitElement)\r\n  implements UmbModalExtensionElement<IpEntryModalData, IpEntryModalValue>\r\n{\r\n  #accessRestrictionContext?: IPAccessRestrictionContext;\r\n\r\n  @state() isValid: boolean = false;\r\n\r\n  @property({ type: Object }) errors: Errors = {};\r\n  @property({ type: String }) id = '';\r\n  @property({ type: String }) ip = '';\r\n  @property({ type: String }) description = '';\r\n  @property({ attribute: false }) data?: IpEntryModalData;\r\n  @property({ attribute: false })\r\n  modalContext?: UmbModalContext<IpEntryModalData, IpEntryModalValue>;\r\n\r\n  initialIp: string = '';\r\n\r\n  constructor() {\r\n    super();\r\n    this.consumeContext(IP_ACCESS_RESTRICTION_CONTEXT_TOKEN, (instance) => {\r\n      this.#accessRestrictionContext = instance;\r\n    });\r\n  }\r\n\r\n  protected firstUpdated() {\r\n    if (this.modalContext?.data?.ipEntry) {\r\n      const { id, ip, description } = this.modalContext.data.ipEntry;\r\n      this.id = id ?? '';\r\n      this.ip = ip ?? '';\r\n      this.description = description ?? '';\r\n      this.initialIp = ip ?? '';\r\n    } else {\r\n      console.error('No IP Entry data found in modal context');\r\n    }\r\n  }\r\n\r\n  private _handleClose() {\r\n    this.modalContext?.submit();\r\n  }\r\n\r\n  private async _handleSubmit(e: Event) {\r\n    e.preventDefault();\r\n    await this._validateForm();\r\n\r\n    if (!this.isValid) {\r\n      console.error('Form validation failed:');\r\n      return;\r\n    }\r\n\r\n    const ipEntry: IPAccessEntry = {\r\n      ip: this.ip,\r\n      description: this.description,\r\n    };\r\n\r\n    if (this.id) {\r\n      ipEntry.id = this.id;\r\n    }\r\n\r\n    try {\r\n      if (this.#accessRestrictionContext) {\r\n        await this.#accessRestrictionContext.saveIpAccessEntry(ipEntry);\r\n      } else {\r\n        console.error('Access restriction context is not available');\r\n      }\r\n      this._handleClose();\r\n    } catch (error) {\r\n      console.error('Failed to save IP access entry:', error);\r\n    }\r\n  }\r\n\r\n  private _handleInputChange(event: Event) {\r\n    enum InputFieldNames {\r\n      Id = 'id',\r\n      Ip = 'ip',\r\n      Description = 'description',\r\n    }\r\n\r\n    const isValidInputFieldName = (fieldName: any): fieldName is InputFieldNames =>\r\n      Object.values(InputFieldNames).includes(fieldName as InputFieldNames);\r\n    const inputElement = event.target as HTMLInputElement;\r\n\r\n    if (isValidInputFieldName(inputElement.name)) {\r\n      this[inputElement.name] = inputElement.value;\r\n    }\r\n    this._validateForm();\r\n  }\r\n\r\n  private _validateIp(ip: string): boolean {\r\n    if (!ip) {\r\n      return false;\r\n    }\r\n\r\n    const wildcards = (ip.match(/\\*/g) || []).length;\r\n\r\n    if (wildcards > 0) {\r\n      if (wildcards === 1 && ip.endsWith('*')) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      const expression =\r\n        /((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$))/;\r\n      return expression.test(ip);\r\n    }\r\n  }\r\n\r\n  private async _checkDuplicateIps(ip: string): Promise<boolean> {\r\n    try {\r\n      const ipObservable = this.#accessRestrictionContext?.ips ?? of();\r\n      const allIpEntries = await firstValueFrom(ipObservable);\r\n      return allIpEntries.includes(ip) && this.initialIp !== ip;\r\n    } catch (error) {\r\n      console.error('No duplicates found in ips observable, error:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private async _validateForm() {\r\n    this.errors = {};\r\n    if (!this._validateIp(this.ip)) {\r\n      this.errors.ip = 'Invalid IP';\r\n    } else if (await this._checkDuplicateIps(this.ip)) {\r\n      this.errors.ip = 'The IP Address is already whitelisted';\r\n      this.requestUpdate();\r\n    }\r\n\r\n    if (!this.description) {\r\n      this.errors.description = 'A description is required';\r\n    }\r\n\r\n    this.isValid = Object.keys(this.errors).length === 0;\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n      <umb-body-layout headline=\"IP Access Restriction\">\r\n        <uui-box>\r\n          <p>\r\n            A wildcard is only allowed at the end. When using a wildcard, the entry is no longer checked for a valid IP\r\n            address. Example: 127.0.* or 127.0.0*\r\n          </p>\r\n\r\n          <uui-form>\r\n            <form id=\"IpEntryForm\" @submit=${this._handleSubmit}>\r\n              <!-- Form input Id -->\r\n              <uui-input type=\"text\" id=\"id\" name=\"id\" label=\"hidden\" .value=\"${this.id}\"></uui-input>\r\n\r\n              <!-- Form input IP Address -->\r\n              <uui-form-layout-item>\r\n                <uui-label id=\"ipLabel\" slot=\"label\" for=\"IpAddress\" required>IP</uui-label>\r\n                <span slot=\"Ip Address\"></span>\r\n                <div>\r\n                  <uui-input\r\n                    id=\"IpAddress\"\r\n                    type=\"text\"\r\n                    name=\"ip\"\r\n                    placeholder=\"192.168.1.1\"\r\n                    label=\"Ip\"\r\n                    required\r\n                    .value=\"${this.ip}\"\r\n                    @input=\"${this._handleInputChange}\"\r\n                  >\r\n                  </uui-input>\r\n                  ${this.errors.ip ? html`<div class=\"error-message\">${this.errors.ip}</div>` : ''}\r\n                </div>\r\n              </uui-form-layout-item>\r\n\r\n              <!-- Form input description -->\r\n              <uui-form-layout-item>\r\n                <uui-label slot=\"label\" for=\"Description\" ?required=${true}>Description</uui-label>\r\n                <span slot=\"description\"></span>\r\n                <div>\r\n                  <uui-input\r\n                    id=\"Description\"\r\n                    type=\"text\"\r\n                    name=\"description\"\r\n                    placeholder=\"John Doe\"\r\n                    label=\"Description\"\r\n                    required\r\n                    .value=\"${this.description}\"\r\n                    @input=\"${this._handleInputChange}\"\r\n                  >\r\n                  </uui-input>\r\n                  ${this.errors.description ? html`<div class=\"error-message\">${this.errors.description}</div>` : ''}\r\n                </div>\r\n              </uui-form-layout-item>\r\n\r\n              <!-- Save button -->\r\n              <uui-button type=\"submit\" label=\"save\" look=\"primary\" color=\"positive\">Save</uui-button>\r\n            </form>\r\n          </uui-form>\r\n        </uui-box>\r\n\r\n        <!-- Close button -->\r\n\r\n        <uui-button\r\n          slot=\"actions\"\r\n          id=\"cancel\"\r\n          label=\"Cancel\"\r\n          look=\"default\"\r\n          color=\"default\"\r\n          type=\"button\"\r\n          @click=\"${this._handleClose}\"\r\n          >close</uui-button\r\n        >\r\n      </umb-body-layout>\r\n    `;\r\n  }\r\n\r\n  public static readonly styles = css`\r\n    #id {\r\n      display: none;\r\n    }\r\n    .error-message {\r\n      color: rgb(191, 33, 78);\r\n    }\r\n  `;\r\n}\r\n"],"names":["dashboards","dashboard","manifests","modals","IpEntryModal$1","contexts","IpAccessRestrictionContext","ApiError","request","response","message","CancelError","CancelablePromise","executor","__privateAdd","_isResolved","_isRejected","_isCancelled","_cancelHandlers","_promise","_resolve","_reject","__privateSet","resolve","reject","onResolve","value","__privateGet","onReject","reason","onCancel","cancelHandler","onFulfilled","onRejected","onFinally","error","OpenAPI","isDefined","isString","isStringWithValue","isBlob","isFormData","base64","str","getQueryString","params","qs","append","key","process","v","k","getUrl","config","options","encoder","path","substring","group","_a","url","getFormData","formData","_","resolver","getHeaders","token","username","password","additionalHeaders","headers","credentials","getRequestBody","sendRequest","body","controller","getResponseHeader","responseHeader","content","getResponseBody","contentType","type","catchErrorCodes","result","errorStatus","errorStatusText","errorBody","responseBody","V1Service","__request","id","requestBody","onInit","_host","extensionRegistry","dashboardManifests","modalManifests","contextManifests","UMB_AUTH_CONTEXT","_auth","umbOpenApi","IPAccessRestrictionDataSource","host","tryExecuteAndNotify","deleteOperation","IPAccessRestrictionRepository","UmbControllerBase","_dataSource","IPAccessRestrictionContext","_checkIpWhitelistFile","_ipEntries","_ips","_clientIp","_headerInfo","_isIpInList","_installationInfo","UmbStringState","UmbArrayState","x","UmbBooleanState","IP_ACCESS_RESTRICTION_CONTEXT_TOKEN","ips","clientIp","data","entry","UmbContextToken","IP_ENTRY_MODAL_TOKEN","UmbModalToken","DashboardElement","UmbElementMixin","LitElement","_instance","_ipWhitelisteTextFileInUse","UMB_MODAL_MANAGER_CONTEXT","instance","dateString","ipEntry","ipDetails","html","unsafeHTML","css","__decorateClass","property","customElement","DashboardElement$1","_accessRestrictionContext","IpEntryModal","_b","ip","description","event","InputFieldNames","isValidInputFieldName","fieldName","inputElement","wildcards","ipObservable","of","firstValueFrom","state"],"mappings":"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"}